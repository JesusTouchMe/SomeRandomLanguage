Grammar rules. First one at bottom


statements              : EOL* expr (EOL+ expr)*

expr			        : KEYWORD:VAR IDENTIFIER ASSIGN? expr
                        : IDENTIFIER ASSIGN expr
						: comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr               : NOT comp-expr
						: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr	            : term ((PLUS|MINUS) term)*

term				    : factor ((MUL|DIV) factor)*

factor			        : (PLUS|MINUS) factor
						: power

power				    : call (POW factor)*

call				    : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom 			    	: INT|FLOAT|STRING|IDENTIFIER|IDENTIFIER (LBRACKET (INT) RBRACKET)
						: LPAREN expr RPAREN
						: list-expr
						: if-expr
						: for-expr
						: while-expr
						: func-def

list-expr		        : LBRACKET (expr (COMMA expr)*)? RBRACKET

if-expr		        	: KEYWORD:IF expr LBRACE
                          (expr if-expr-b|if-expr-c?)
                        | (EOL statements|if-expr-b|if-expr-c)
                          RBRACE

if-expr-b		        : KEYWORD:ELIF expr LBRACE
                          (expr if-expr-b|if-expr-c?)
                        | (EOL statements|if-expr-b|if-expr-c)
                          RBRACE

if-expr-c               : KEYWORD:ELSE LBRACE
                          expr
                        | (EOL statements)
                          RBRACE

for-expr	        	: KEYWORD:FOR IDENTIFIER ASSIGN expr KEYWORD:TO expr
				          (KEYWORD:STEP expr)? LBRACE
				          expr
				        | (EOL statements)
				          RBRACE

while-expr          	: KEYWORD:WHILE expr LBRACE
                          expr
                        | (EOL statements)
                          RBRACE

func-def		        : KEYWORD:FUN IDENTIFIER?
						  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
						  (ARROW? LBRACE expr )
						| (EOL statements)
						  RBRACE